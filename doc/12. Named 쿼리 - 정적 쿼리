---------------------------------------
  Named 쿼리 - 정적 쿼리
---------------------------------------

    - 미리 정의해서 이름을 부여해 두고 사용하는 JPQL
    - 정적 쿼리에만 적용 가능
    - 어노테이션, XML에 정의
    - 애플리케이션 로딩 시점에 초기화 후 재사용 ( 미리 파싱 후 캐싱하고 있음 )
    - 애플리케이션 로딩 시점에 쿼리를 검증 ** (컴파일 시점에 에러 감지 가능 )

---------------------------------------
  Named 쿼리 - 어노테이션
---------------------------------------
    - Entity에 미리 쿼리 내용을 선언해 놓고, em.createNamedQuery()로 호출

    @Entity
    @NamedQuery ( name = "Member.findByUsername",
                  query= "select m from Member m where m.username = :username")
    public class Member { ... }

    List<Member> list = em.createNamedQuery("Member.findByUsername", Member.class)
                            .setParameter("username", "회원1")
                            .getResultList();

---------------------------------------
  Named 쿼리 - XML 정의
---------------------------------------
    - [META-INF/persistence.xml]
        <persistenct-unit name="jpabook">
            <mapping-file>META-INF/ormMember.xml</mapping-file>

    - [META-INF/ormMember.xml]
        <?xml version="1.0" encoding="UTF-8" ?>
        <entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" version="2.2">

            <named-query name="Member.findByUsername">
                <query><![CDATA[
                    select m from Member m where m.username = :username
                ]]>
                </query>
            </named-query>

            <named-query name="Member.count">
                <query>select count(m) from Member m </query>
            </named-query>

        </entity-mappings>

---------------------------------------
  Spring Data API 에서의 Named Query
---------------------------------------
    public interface UserRepository extends JapRepository<User, Long>{
        @Query("select m from Member m where m.username = :username")
        Member findByUsername(String username);
    }

