---------------------------------------
  FETCH JOIN
---------------------------------------
    - SQL 조인 종류가 아니다.
    - JPQL 에서 성능 최적화를 위해 제공하는 기능
    - 연관된 엔터티나 컬렉션을 SQL 한 번에 함께 조회하는 기능
    - join fetch 명령어 사용 (실무에서 많이 사용함)
    - 페치 조인 ::= [ LEFT | OUTER | INNER ] JOIN FETCH 조인경로

---------------------------------------
  ENTITY FETCH JOIN
---------------------------------------

    - 회원을 조회 하면서 연관된 팀도 함께 조회 (SQL 한번에)

    - SQL을 보면 회원 뿐만 아니라 팀(T.*)도 함께 SELECT

    - [JPQL]
        select m from Member m join fetch m.team
        ==> projection 에 m 만 있지만, m.team 도 한번에 조회해 온다.

    - [SQL]
        select m*, t.* from Member m inner join Team t on m.team_id=t.id

---------------------------------------
  COLLECTION FETCH JOIN
---------------------------------------

    - 일대다 관계, 컬렉션 페치 조인

    - [JPQL]
        select t from Team t join fetch t.members
        where t.name = 'teamA'

        ==> 결과는 member 갯수만큼 team이 같이 생성됨.

    - [SQL]
        select
            T.*, M.*
        from        TEAM    T
        inner join  MEMBER  M ON T.id = M.team_id
        where t.name = 'teamA'


---------------------------------------
  FETCH JOIN 과 DISTINCT
---------------------------------------

    - DISTINCT 가 추가로 애플리케이션에서 중복 제거 시도
    - 같은 식별자를 가진 Team 엔터티 제거

    [DISTINCT 추가 시 결과]
    - [JPQL]
        select DISTINCT t from Team t join fetch t.members
        where t.name = 'teamA'

---------------------------------------
  FETCH JOIN 과 일반 JOIN 차이
---------------------------------------
    - 일반 조인 실행 시, 연관된 엔터티를 함께 조회 안함.

    - [JPQL]
        select t from Team t join t.members where t.name = 'teamA'

    - [SQL]
        select
            T.*
        from        TEAM T
        inner join  MEMBER M ON T.id = M.team_id
        where T.name='teamA'

    ==> 일반 JOIN은 MEMBER 필드는 조회 안함.

 ---------------------------------------
   FETCH JOIN 특징과 한계
 ---------------------------------------

    - FETCH JOIN 대상에는 별칭을 줄 수 없다.
        . Hibernate는 가능, 가급적 사용 X

    - 둘 이상의 컬렉션은 FETCH JOIN 불가

    - 컬렉션을 FETCH 조인하면 페이징 API ( setFirstResult, setMaxResults)사용 불가
        . 일대일, 다대일 같은 단일값 연관 필드는 FETCH JOIN 해도 페이징 가능
        . Hibernate는 경로 로그를 남기고 메모리에서 페이징(매우위험)

    - 연관된 엔터티들을 SQL 한 번으로 조회 - 성능 최적화
    - 엔터티에 직접 적용하는 글로벌 로딩 전략 보다 우선함
      . @OneToMany(fetch = FetchType.LAZY) // 글로벌 로딩 전략
    - 실무에서 글로벌 로딩 전략은 모두 지연 로딩
    - 최적화가 필요한 곳은 페치 조인 적용

    - 페치 조인은 객체 그래프를 유지할 때, 유용하다

    - 여러 테이블은 조인해서 엔터티가 가진 모양이 아닌 전혀 다른 결과를 내야 하면
      페치 조인 보다는 일반 조인을 사용하고 필요한 데이터들만 조회해서
      DTO로 반환하는 것이 효과적